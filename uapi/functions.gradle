ext {
    allCfg = rootProject.ext.all
    libs = allCfg.dependencies
    if (thisRepo == 'base') {
        repoCfg = rootProject.ext.base
    } else if (thisRepo == 'cornerstone') {
        repoCfg = rootProject.ext.cornerstone
        baseProjects = rootProject.ext.base.projects
    } else {
        throw new RuntimeException("Unsupported repo name - ${thisRepo}")
    }
    repoProjects = repoCfg.projects
    buildTime  = getBuildTime()
}

def getBuildVersion(projectName) {
    def buildVersion = null
    def matchedMeta = repoProjects.find { it.value.name == projectName }?.value
    if (matchedMeta != null) {
        buildVersion = matchedMeta.version
        if (matchedMeta.type == 'stable') {
            buildVersion = "${buildVersion}-${matchedMeta.type}"
        } else if (matchedMeta.type == 'alpha' || matchedMeta.type == 'beta' || matchedMeta.type == 'rc') {
            buildVersion = "${buildVersion}-${matchedMeta.type}${matchedMeta.no}"
        } else {
            buildVersion = "${buildVersion}-${buildTime}"
        }
    } else {
        throw new Exception("No project configuration for project ${projectName}");
    }
    return buildVersion
}

def getBuildTime() {
    def timestampFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    timestampFormat.timeZone = TimeZone.getTimeZone("UTC")
    return timestampFormat.format(new Date())
}

def getMavenRepo(projectName) {
    def prjCfg = repoProjects.find { it.value.name == projectName }?.value
    if (prjCfg.type == 'stable') {
        return 'maven-release'
    } else {
        return 'maven-snapshot'
    }
}

ext {
    getBuildVersion = this.&getBuildVersion
    getBuildTime = this.&getBuildTime
    getMavenRepo = this.&getMavenRepo
}
